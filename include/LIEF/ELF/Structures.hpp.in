/* From llvm/Support/ELF.h */
#ifndef LIEF_ELF_STRUCTURES_H_
#define LIEF_ELF_STRUCTURES_H_

#include <cstring>

#include "LIEF/types.hpp"
#include "LIEF/ELF/enums.hpp"

namespace LIEF {
//! @brief Namespace related to the LIEF's ELF module
namespace ELF {

@LIEF_ELF_STRUCTURES@

static const SECTION_FLAGS section_flags_array[] = {
  SECTION_FLAGS::SHF_NONE, SECTION_FLAGS::SHF_WRITE, SECTION_FLAGS::SHF_ALLOC, SECTION_FLAGS::SHF_EXECINSTR,
   SECTION_FLAGS::SHF_MERGE, SECTION_FLAGS::SHF_STRINGS, SECTION_FLAGS::SHF_INFO_LINK,
   SECTION_FLAGS::SHF_LINK_ORDER, SECTION_FLAGS::SHF_OS_NONCONFORMING, SECTION_FLAGS::SHF_GROUP,
   SECTION_FLAGS::SHF_TLS, SECTION_FLAGS::SHF_EXCLUDE, SECTION_FLAGS::XCORE_SHF_CP_SECTION,
   SECTION_FLAGS::XCORE_SHF_DP_SECTION, SECTION_FLAGS::SHF_MASKOS, SECTION_FLAGS::SHF_MASKPROC,
   SECTION_FLAGS::SHF_HEX_GPREL, SECTION_FLAGS::SHF_MIPS_NODUPES, SECTION_FLAGS::SHF_MIPS_NAMES,
   SECTION_FLAGS::SHF_MIPS_LOCAL, SECTION_FLAGS::SHF_MIPS_NOSTRIP, SECTION_FLAGS::SHF_MIPS_GPREL,
   SECTION_FLAGS::SHF_MIPS_MERGE, SECTION_FLAGS::SHF_MIPS_ADDR, SECTION_FLAGS::SHF_MIPS_STRING
};


class ELF32 {
  public:
  typedef Elf32_Addr    Elf_Addr;
  typedef Elf32_Off     Elf_Off;
  typedef Elf32_Half    Elf_Half;
  typedef Elf32_Word    Elf_Word;
  typedef Elf32_Sword   Elf_Sword;
  // Equivalent
  typedef Elf32_Addr    Elf_Xword;
  typedef Elf32_Sword   Elf_Sxword;

  typedef uint32_t      uint;

  typedef Elf32_Phdr    Elf_Phdr;
  typedef Elf32_Ehdr    Elf_Ehdr;
  typedef Elf32_Shdr    Elf_Shdr;
  typedef Elf32_Sym     Elf_Sym;
  typedef Elf32_Rel     Elf_Rel;
  typedef Elf32_Rela    Elf_Rela;
  typedef Elf32_Dyn     Elf_Dyn;
  typedef Elf32_Verneed Elf_Verneed;
  typedef Elf32_Vernaux Elf_Vernaux;
  typedef Elf32_Auxv    Elf_Auxv;
  typedef Elf32_Verdef  Elf_Verdef;
  typedef Elf32_Verdaux Elf_Verdaux;

};


class ELF64 {
  public:
  typedef Elf64_Addr    Elf_Addr;
  typedef Elf64_Off     Elf_Off;
  typedef Elf64_Half    Elf_Half;
  typedef Elf64_Word    Elf_Word;
  typedef Elf64_Sword   Elf_Sword;

  typedef Elf64_Xword   Elf_Xword;
  typedef Elf64_Sxword  Elf_Sxword;

  typedef uint64_t      uint;

  typedef Elf64_Phdr    Elf_Phdr;
  typedef Elf64_Ehdr    Elf_Ehdr;
  typedef Elf64_Shdr    Elf_Shdr;
  typedef Elf64_Sym     Elf_Sym;
  typedef Elf64_Rel     Elf_Rel;
  typedef Elf64_Rela    Elf_Rela;
  typedef Elf64_Dyn     Elf_Dyn;
  typedef Elf64_Verneed Elf_Verneed;
  typedef Elf64_Vernaux Elf_Vernaux;
  typedef Elf64_Auxv    Elf_Auxv;
  typedef Elf64_Verdef  Elf_Verdef;
  typedef Elf64_Verdaux Elf_Verdaux;
 };

template<typename T>
struct Sizes {
  const static uint32_t ehdr = sizeof(typename T::Elf_Ehdr);
  const static uint32_t phdr = sizeof(typename T::Elf_Phdr);
  const static uint32_t shdr = sizeof(typename T::Elf_Shdr);
  const static uint32_t sym  = sizeof(typename T::Elf_Sym);
};


} /* end namespace ELF */
} /* end namespace LIEF */
#endif
